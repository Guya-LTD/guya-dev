# version of the configuration.
apiVersion: skaffold/v2beta7

kind: Config

# holds additional information about the config.
metadata:
  # an identifier for the project.
  name: guya-dev

# describes how images are built.
build:
  tagPolicy:
    envTemplate:
      template: "{{.VERSION}}"

  local: 
    concurrency: 0
    push: false

  #tagPolicy:
  #  envTemplate:
  #     template: "{{.TAG}}"

  # the images you're going to be building.
  artifacts:
  # name of the image to be built.
  - image: guyaltd/admin-panel
    # directory containing the artifact's sources.
    context: admin-panel
    # `beta` describes an artifact built from a Dockerfile.
    docker:
      # locates the Dockerfile relative to workspace.
      dockerfile: Dockerfile
      target: development
      cacheFrom: guyaltd/admin-panel:dev
    # `beta` local files synced to pods instead of triggering an image build when modified. If no files are listed, sync all the files and infer the destination.
    sync:
      manual:
      # Sync all the javascript files that are in the src folder
      # with the container src folder
      - src: 'src/**/*.js'
        dest: .

  # name of the image to be built.
  - image: guyaltd/shop-web
    # directory containing the artifact's sources.
    context: shop-web
    # `beta` describes an artifact built from a Dockerfile.
    docker:
      # locates the Dockerfile relative to workspace.
      dockerfile: Dockerfile
      target: development
      cacheFrom: guyaltd/shop-web:dev
    # `beta` local files synced to pods instead of triggering an image build when modified. If no files are listed, sync all the files and infer the destination.
    sync:
      manual:
      # Sync all the javascript files that are in the src folder
      # with the container src folder
      - src: '**/*.js'
        dest: .

  # name of the image to be built.
  - image: guyaltd/xpress-web
    # directory containing the artifact's sources.
    context: xpress-web
    # `beta` describes an artifact built from a Dockerfile.
    docker:
      # locates the Dockerfile relative to workspace.
      dockerfile: Dockerfile
      target: development
      cacheFrom: guyaltd/xpress-web:dev
    # `beta` local files synced to pods instead of triggering an image build when modified. If no files are listed, sync all the files and infer the destination.
    sync:
      manual:
      # Sync all the javascript files that are in the src folder
      # with the container src folder
      - src: '**/*.js'
        dest: .

  # name of the image to be built.
  - image: guyaltd/branch
    # directory containing the artifact's sources.
    context: branch
    # `beta` describes an artifact built from a Dockerfile.
    docker:
      # locates the Dockerfile relative to workspace.
      dockerfile: Dockerfile
      target: development
      cacheFrom: guyaltd/branch:dev
    # `beta` local files synced to pods instead of triggering an image build when modified. If no files are listed, sync all the files and infer the destination.
    sync:
      manual:
      - src: '**/*.py'
        dest: "."

  # name of the image to be built.
  #- image: guyaltd/user
    # directory containing the artifact's sources.
  #  context: user
    # `beta` describes an artifact built from a Dockerfile.
  #  docker:
      # locates the Dockerfile relative to workspace.
  #    dockerfile: Dockerfile
    # `beta` local files synced to pods instead of triggering an image build when modified. If no files are listed, sync all the files and infer the destination.
  #  sync:
  #    manual:
      # Sync all the javascript files that are in the src folder
      # with the container src folder
  #    - src: 'src/**/*.js'
  #      dest: .
  
# describes how images are deployed.
deploy:
  # `beta` uses the kustomize CLI to "patch" a deployment for a target environment.
  kustomize:
    # path to Kustomization files.
    paths:
    - guya/admin-panel/overlays/development
    - guya/shop-web/overlays/development
    - guya/xpress-web/overlays/development
    - guya/branch/overlays/development

# `beta` can override be used to build, test or deploy configuration.
profiles:
# a unique profile name.
- name: production
  deploy:

# a unique profile name.
- name: staging
  deploy:
